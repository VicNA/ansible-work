---
- name: Checking and installing available updates
  hosts: "{{ hostvar | default('nothing') }}:!disabled_hosts"
  gather_facts: false
  vars:
    update_states:
      search: searched
      install: installed
    update_state: "{{ update_states[state | default('search')] | default(update_states.search) }}"

  tasks:

    - name: Delete the log file of the previous update installation
      ansible.windows.win_file:
        path: C:\ansible_wu.txt
        state: absent

    - name: Search for available updates
      ansible.windows.win_updates:
        state: searched
        category_names: '*'
      register: updates_searched

    - name: Installing available updates and reboot
      when: update_state == update_states.install
      block:

        - name: Reboot the host if a reboot is required
          ansible.windows.win_reboot:
            reboot_timeout: 3600
          when: updates_searched.reboot_required

        - name: Installing available updates
          ansible.windows.win_updates:
            state: installed
            category_names: '*'
            log_path: C:\ansible_wu.txt
          register: updates_installed

        - name: Reboot the host if a reboot is required
          ansible.windows.win_reboot:
            reboot_timeout: 3600
          when: updates_installed.reboot_required


    - name: Set a list of available or installed updates
      ansible.builtin.set_fact:
        list_updates: "{{ list_updates | default([]) + [item.value.title] }}"
      loop: "{{ updates_installed.updates | default(updates_searched.updates) | dict2items }}"
      no_log: true

    - name: List of available or installed updates
      ansible.builtin.debug:
        # var: list_updates
        msg: "{{ list_updates }}"
