---
- name: Checking and installing available updates
  hosts: "{{ hostvar | default('nothing') }}:!disabled_hosts"
  gather_facts: false
  vars:
    playbook_states:
      search: searched
      reboot: required
      install: installed
    update_state: "{{ playbook_states[state | default('search')] | default(playbook_states.search) }}"

  tasks:

    # - name: Check the pending reboot
    #   ansible.windows.win_shell: "(Test-PendingReboot).IsRebootPending"
    #   register: is_pending_reboot
    #   changed_when: false

    # - name: Reboot the host if a reboot is required
    #   ansible.windows.win_reboot:
    #     reboot_timeout: 5400
    #   when:
    #     - update_state == playbook_states.install
    #     - is_pending_reboot.stdout | trim | bool

    - name: Delete the log file of the previous update installation
      ansible.windows.win_file:
        path: C:\ansible_wu.txt
        state: absent
      when:
        - update_state == playbook_states.install

    - name: Search for available updates
      ansible.windows.win_updates:
        state: searched
        category_names: '*'
        reject_list:
          - KB890830
      register: available_updates

    - name: Installing available updates and reboot
      when: update_state == playbook_states.install
      block:

        - name: Installing available updates
          ansible.windows.win_updates:
            state: installed
            category_names: '*'
            # accept_list:
            #   - "{{ available_updates.updates | dict2items | json_query('[].value.kb') }}"
            # reject_list:
            #   - Windows Malicious Software Removal Tool
            log_path: C:\ansible_wu.txt
          register: updates_installed

        - name: Reboot the host if a reboot is required
          ansible.windows.win_reboot:
            reboot_timeout: 5400
          when: updates_installed.reboot_required


    - name: List of available or installed updates
      ansible.builtin.debug:
        msg: "{{ updades | json_query('[].value.kb') | default('no updates') }}"
      vars:
        updades: "{{ (updates_installed.updates | default(available_updates.updates)) | dict2items }}"
