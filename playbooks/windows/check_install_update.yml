---
- name: Checking and installing available updates
  hosts: "{{ hostvar | default('nothing') }}:!disabled_hosts"
  gather_facts: false
  vars:
    playbook_states:
      search: searched
      reboot: required
      install: installed
    update_state: "{{ playbook_states[state | default('search')] | default(playbook_states.search) }}"

  tasks:

    - name: Delete the log file of the previous update installation
      ansible.windows.win_file:
        path: C:\ansible_wu.txt
        state: absent

    - name: Search for available updates
      ansible.windows.win_updates:
        state: searched
        category_names: '*'
        reject_list:
          - Windows Malicious Software Removal Tool
      register: updates_searched

    - name: Reboot the host if a reboot is required
      ansible.windows.win_reboot:
        reboot_timeout: 5400
      when:
        - update_state == playbook_states.reboot
        - updates_searched.reboot_required

    - name: Installing available updates and reboot
      when: update_state == playbook_states.install
      block:

        - name: Installing available updates
          ansible.windows.win_updates:
            state: installed
            category_names: '*'
            log_path: C:\ansible_wu.txt
          register: updates_installed

        - name: Reboot the host if a reboot is required
          ansible.windows.win_reboot:
            reboot_timeout: 5400
          when: updates_installed.reboot_required


    - name: List of available or installed updates
      ansible.builtin.debug:
        msg: "{{ updades | json_query('[].value.title') | default('no updates') }}"
      vars:
        updades: "{{ (updates_installed.updates | default(updates_searched.updates)) | dict2items }}"
